{"map":"{\"version\":3,\"sources\":[\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/logo.svg\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/form_groups/Strapped_Input.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/form_groups/Strapped_Select.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/form_groups/Strapped_Checkbox.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/form_groups/Strapped_Multi.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/Question.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/Quiz_Form.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/components/Create_Quiz.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/App.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/serviceWorker.js\",\"/Users/XWINGFIGHTER/Documents/Code/cohub-challenge/client/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"StrappedInput\",\"_ref\",\"label\",\"react_default\",\"a\",\"createElement\",\"className\",\"htmlFor\",\"main\",\"name\",\"StrappedSelect\",\"options\",\"StrappedCheckbox\",\"StrappedMulti\",\"map\",\"selection\",\"key\",\"Question\",\"_ref$question\",\"question\",\"position\",\"field_type\",\"multiselect\",\"Object\",\"toConsumableArray\",\"Array\",\"keys\",\"concat\",\"CREATE_QUIZ\",\"gql\",\"_templateObject\",\"QuizForm\",\"data\",\"react_apollo_browser_umd\",\"mutation\",\"createQuiz\",\"onSubmit\",\"e\",\"variables\",\"participant_name\",\"answers\",\"JSON\",\"stringify\",\"Questions\",\"value\",\"QUESTIONS_QUERY\",\"Create_Quiz_templateObject\",\"CreateQuiz\",\"_Component\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"apply\",\"arguments\",\"inherits\",\"createClass\",\"query\",\"loading\",\"error\",\"console\",\"log\",\"Component\",\"client\",\"ApolloClient\",\"uri\",\"App\",\"src\",\"logo\",\"alt\",\"style\",\"display\",\"margin\",\"Create_Quiz\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.ce14c0e7.svg\\\";\",\"import React from 'react';\\nimport { TextField } from 'react-components-form';\\n\\nexport default function StrappedInput({label}) {\\n  return <div className=\\\"form-group\\\">\\n    <label htmlFor={label}>{label}</label>\\n    <TextField name={label} className=\\\"form-control\\\" />\\n  </div>\\n}\\n\",\"import React from 'react';\\nimport { SelectField } from 'react-components-form';\\n\\nexport default function StrappedSelect({label, options}) {\\n  return <div className=\\\"form-group\\\">\\n    <SelectField name={label}\\n                 label={label}\\n                 options={options}\\n                 className=\\\"form-control\\\"\\n      />\\n  </div>\\n}\\n\",\"import React from 'react';\\nimport { CheckboxField } from 'react-components-form';\\n\\nexport default function StrappedCheckbox({label, options}) {\\n  return <div className=\\\"form-group\\\">\\n    <label htmlFor={label}>{label}\\n      <CheckboxField name={label} label=\\\"Yes\\\"\\n                     className=\\\"form-control checkbox-inline\\\" />\\n    </label>\\n  </div>\\n}\\n\",\"import React from 'react';\\nimport { CheckboxField, ListField, ObjectField } from 'react-components-form';\\n\\nexport default function StrappedMulti({label, options}) {\\n  return <div className=\\\"form-group\\\">\\n      <ListField label={label} name={label}>\\n        <ObjectField>\\n          {options.map(selection => (\\n          <CheckboxField key={selection} name={selection} label={selection}/>\\n        ))}\\n        </ObjectField>\\n      </ListField>\\n  </div>\\n}\\n\",\"import React from 'react';\\nimport StrappedInput from './form_groups/Strapped_Input';\\nimport StrappedSelect from './form_groups/Strapped_Select';\\nimport StrappedCheckbox from './form_groups/Strapped_Checkbox';\\nimport StrappedMulti from './form_groups/Strapped_Multi';\\n\\nexport default function Question({\\n  question: { position, label, field_type, options, multiselect }\\n}) {\\n  return(\\n    <div>\\n      {(() => {\\n        if (field_type === \\\"select\\\") {\\n          return <StrappedSelect label={label} options={options} />\\n        } else if (field_type === \\\"boolean\\\") {\\n          return <StrappedCheckbox label={label} />\\n        } else if (field_type === \\\"string\\\") {\\n          return <StrappedInput label={label} />\\n        } else if (field_type === \\\"list\\\") {\\n          return <StrappedMulti label={label} options={options} />\\n        } else if (field_type === \\\"number\\\") {\\n          return <StrappedSelect label={label}\\n                                 options={[...Array(16).keys(), '15+']} />\\n        }\\n      })()}\\n    </div>\\n  )\\n}\\n\",\"import React from 'react';\\nimport gql from 'graphql-tag';\\nimport StrappedInput from './form_groups/Strapped_Input';\\nimport { Mutation } from 'react-apollo';\\nimport Question from './Question';\\nimport { Form, TextField, SubmitField} from 'react-components-form';\\n\\n// Mutation that creates a quiz on submission of the form\\nconst CREATE_QUIZ = gql`\\n  mutation CreateQuiz($participant_name: String!, $answers: String!) {\\n    createQuiz(participant_name: $participant_name, answers: $answers) {\\n      id\\n      participant_name\\n      answers\\n    }\\n  }\\n`;\\n\\nexport default function QuizForm({data}) {\\n  return (\\n    <Mutation mutation={CREATE_QUIZ}>\\n      {createQuiz => (\\n        <Form\\n          onSubmit={(e) => {\\n            createQuiz({ variables: {\\n              \\\"participant_name\\\": e.participant_name,\\n              \\\"answers\\\": JSON.stringify(e)\\n            }}) }\\n          }\\n        >\\n          <div className=\\\"form-group\\\">\\n            <TextField label=\\\"Participant Name\\\" name=\\\"participant_name\\\" className=\\\"form-control\\\" />\\n          </div>\\n          { data.Questions.map(question => (\\n            <section key={question.label}>\\n              <Question question={question} />\\n            </section>\\n          ))}\\n          <SubmitField value=\\\"Submit\\\" className=\\\"form-control\\\" />\\n        </Form>\\n      )}\\n    </Mutation>\\n  )\\n}\\n\",\"import React, { Component } from 'react';\\nimport gql from 'graphql-tag';\\nimport { Query } from 'react-apollo';\\nimport QuizForm from './Quiz_Form';\\n\\n// query that pulls the questions from graphql for display in the quiz\\nconst QUESTIONS_QUERY = gql`\\n  query QuestionsQuery{\\n    Questions {\\n      position\\n      label\\n      field_type\\n      options\\n      multiselect\\n    }\\n  }\\n`;\\n\\nexport class CreateQuiz extends Component {\\n  render() {\\n    return (\\n      <div key=\\\"container\\\">\\n        <h1 className=\\\"display-4 my-3\\\">Questions</h1>\\n        <Query query={QUESTIONS_QUERY}>\\n          {({ loading, error, data }) => {\\n            if (loading) return <h4>loading...</h4>;\\n            if (error) console.log(error);\\n            return <QuizForm data={data} />\\n          }}\\n        </Query>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default CreateQuiz;\\n\",\"import React, { Component } from 'react';\\nimport ApolloClient from 'apollo-boost';\\nimport { ApolloProvider }  from 'react-apollo';\\nimport CreateQuiz from './components/Create_Quiz';\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nconst client = new ApolloClient({\\n  uri: '/graphql'\\n});\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <ApolloProvider client={client}>\\n        <div className=\\\"App container\\\">\\n          <div className=\\\"row\\\">\\n            <img src={logo}\\n                 className=\\\"App-logo\\\"\\n                 alt=\\\"CoHub logo\\\"\\n                 style={{ display: 'block', margin: 'auto' }}\\n            />\\n          </div>\\n          <div className=\\\"row\\\">\\n            <h2 style={{ display: 'block', margin: 'auto' }}>Quiz</h2>\\n          </div>\\n          <CreateQuiz />\\n        </div>\\n      </ApolloProvider>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{41:function(e,t,a){e.exports=a.p+\"static/media/logo.ce14c0e7.svg\"},46:function(e,t,a){e.exports=a(72)},51:function(e,t,a){},63:function(e,t,a){},72:function(e,t,a){\"use strict\";a.r(t);var n=a(0),r=a.n(n),l=a(35),o=a.n(l),i=(a(51),a(15)),c=a(16),m=a(30),s=a(17),u=a(31),p=a(43),b=a(9),d=a(27),f=a(8),E=a.n(f),v=a(5);function g(e){var t=e.label;return r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:t},t),r.a.createElement(v.TextField,{name:t,className:\"form-control\"}))}var y=a(44);function h(e){var t=e.label,a=e.options;return r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(v.SelectField,{name:t,label:t,options:a,className:\"form-control\"}))}function w(e){var t=e.label;e.options;return r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:t},t,r.a.createElement(v.CheckboxField,{name:t,label:\"Yes\",className:\"form-control checkbox-inline\"})))}function N(e){var t=e.label,a=e.options;return r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(v.ListField,{label:t,name:t},r.a.createElement(v.ObjectField,null,a.map(function(e){return r.a.createElement(v.CheckboxField,{key:e,name:e,label:e})}))))}function k(e){var t=e.question,a=(t.position,t.label),n=t.field_type,l=t.options;t.multiselect;return r.a.createElement(\"div\",null,\"select\"===n?r.a.createElement(h,{label:a,options:l}):\"boolean\"===n?r.a.createElement(w,{label:a}):\"string\"===n?r.a.createElement(g,{label:a}):\"list\"===n?r.a.createElement(N,{label:a,options:l}):\"number\"===n?r.a.createElement(h,{label:a,options:Object(y.a)(Array(16).keys()).concat([\"15+\"])}):void 0)}function O(){var e=Object(d.a)([\"\\n  mutation CreateQuiz($participant_name: String!, $answers: String!) {\\n    createQuiz(participant_name: $participant_name, answers: $answers) {\\n      id\\n      participant_name\\n      answers\\n    }\\n  }\\n\"]);return O=function(){return e},e}var j=E()(O());function F(e){var t=e.data;return r.a.createElement(b.Mutation,{mutation:j},function(e){return r.a.createElement(v.Form,{onSubmit:function(t){e({variables:{participant_name:t.participant_name,answers:JSON.stringify(t)}})}},r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(v.TextField,{label:\"Participant Name\",name:\"participant_name\",className:\"form-control\"})),t.Questions.map(function(e){return r.a.createElement(\"section\",{key:e.label},r.a.createElement(k,{question:e}))}),r.a.createElement(v.SubmitField,{value:\"Submit\",className:\"form-control\"}))})}function Q(){var e=Object(d.a)([\"\\n  query QuestionsQuery{\\n    Questions {\\n      position\\n      label\\n      field_type\\n      options\\n      multiselect\\n    }\\n  }\\n\"]);return Q=function(){return e},e}var _=E()(Q()),x=function(e){function t(){return Object(i.a)(this,t),Object(m.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{key:\"container\"},r.a.createElement(\"h1\",{className:\"display-4 my-3\"},\"Questions\"),r.a.createElement(b.Query,{query:_},function(e){var t=e.loading,a=e.error,n=e.data;return t?r.a.createElement(\"h4\",null,\"loading...\"):(a&&console.log(a),r.a.createElement(F,{data:n}))}))}}]),t}(n.Component),S=a(41),C=a.n(S),q=(a(63),new p.a({uri:\"/graphql\"})),$=function(e){function t(){return Object(i.a)(this,t),Object(m.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return r.a.createElement(b.ApolloProvider,{client:q},r.a.createElement(\"div\",{className:\"App container\"},r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"img\",{src:C.a,className:\"App-logo\",alt:\"CoHub logo\",style:{display:\"block\",margin:\"auto\"}})),r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"h2\",{style:{display:\"block\",margin:\"auto\"}},\"Quiz\")),r.a.createElement(x,null)))}}]),t}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement($,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[46,2,1]]]);","extractedComments":[]}