{"version":3,"sources":["logo.svg","components/form_groups/Strapped_Input.js","components/form_groups/Strapped_Select.js","components/form_groups/Strapped_Checkbox.js","components/form_groups/Strapped_Multi.js","components/Question.js","components/Quiz_Form.js","components/Create_Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StrappedInput","_ref","label","react_default","a","createElement","className","htmlFor","main","name","StrappedSelect","options","StrappedCheckbox","StrappedMulti","map","selection","key","Question","_ref$question","question","position","field_type","multiselect","handleChange","CREATE_QUIZ","gql","_templateObject","QuizForm","data","react_apollo_browser_umd","mutation","createQuiz","onSubmit","e","variables","participant_name","answers","JSON","stringify","Questions","value","QUESTIONS_QUERY","Create_Quiz_templateObject","CreateQuiz","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","query","loading","error","console","log","Component","client","ApolloClient","uri","App","src","logo","alt","style","display","margin","Create_Quiz","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2b01507.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ce14c0e7.svg\";","import React from 'react';\nimport { TextField } from 'react-components-form';\n\nexport default function StrappedInput({label}) {\n  return <div className=\"form-group\">\n    <label htmlFor={label}>{label}</label>\n    <TextField name={label} className=\"form-control\" />\n  </div>\n}\n","import React from 'react';\nimport { SelectField } from 'react-components-form';\n\nexport default function StrappedSelect({label, options}) {\n  return <div className=\"form-group\">\n    <label htmlFor={label}>{label}\n      <SelectField name={label}\n                   options={options}\n                   className=\"form-control\"\n      />\n    </label>\n  </div>\n}\n","import React from 'react';\nimport { CheckboxField } from 'react-components-form';\n\nexport default function StrappedCheckbox({label, options}) {\n  return <div className=\"form-group\">\n    <label htmlFor={label}>{label}\n      <CheckboxField name={label} label=\"Yes\"\n                     className=\"form-control checkbox-inline\" />\n    </label>\n  </div>\n}\n","import React from 'react';\nimport { CheckboxField, ListField, ObjectField } from 'react-components-form';\n\nexport default function StrappedMulti({label, options}) {\n  return <div className=\"form-group\">\n    <label htmlFor={label}>{label}\n      <ListField name={label}>\n        <ObjectField>\n          {options.map(selection => (\n          <CheckboxField key={selection} name={selection} label={selection}/>\n        ))}\n        </ObjectField>\n      </ListField>\n    </label>\n  </div>\n}\n","import React from 'react';\nimport StrappedInput from './form_groups/Strapped_Input';\nimport StrappedSelect from './form_groups/Strapped_Select';\nimport StrappedCheckbox from './form_groups/Strapped_Checkbox';\nimport StrappedMulti from './form_groups/Strapped_Multi';\n\nexport default function Question({\n  question: { position, label, field_type, options, multiselect }, handleChange\n  }) {\n  return (\n    <div>\n      {(() => {\n        if (field_type === \"select\") {\n          return <StrappedSelect label={label} options={options} />\n        } else if (field_type === \"boolean\") {\n          return <StrappedCheckbox label={label} />\n        } else if (field_type === \"string\") {\n          return <StrappedInput label={label} />\n        } else if (field_type === \"list\") {\n          return <StrappedMulti label={label} options={options} />\n        }\n      })()}\n    </div>\n  )\n}\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport StrappedInput from './form_groups/Strapped_Input';\nimport { Mutation } from 'react-apollo';\nimport Question from './Question';\nimport { Form, SubmitField } from 'react-components-form';\n\n// Mutation that creates a quiz on submission of the form\nconst CREATE_QUIZ = gql`\n  mutation CreateQuiz($participant_name: String!, $answers: String!) {\n    createQuiz(participant_name: $participant_name, answers: $answers) {\n      id\n      participant_name\n      answers\n    }\n  }\n`;\n\nconst submitMethod = (model) => {\n alert(`Submitted: ${JSON.stringify(model)}` );\n}\n\nexport default function QuizForm({data}) {\n  return (\n    <Mutation mutation={CREATE_QUIZ}>\n      {createQuiz => (\n        <Form\n          onSubmit={(e) => {\n            createQuiz({ variables: {\n              \"participant_name\": e.participant_name,\n              \"answers\": JSON.stringify(e)\n            }}) }\n          }\n        >\n          <StrappedInput label={\"participant_name\"} />\n          { data.Questions.map(question => (\n            <section key={question.label}>\n              <Question question={question} />\n            </section>\n          ))}\n          <SubmitField value=\"Submit\" className=\"form-control\" />\n        </Form>\n      )}\n    </Mutation>\n  )\n}\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport QuizForm from './Quiz_Form';\n\n// query that pulls the questions from graphql for display in the quiz\nconst QUESTIONS_QUERY = gql`\n  query QuestionsQuery{\n    Questions {\n      position\n      label\n      field_type\n      options\n      multiselect\n    }\n  }\n`;\n\nexport class CreateQuiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      participant_name: '', answers: ''\n    }\n  }\n  render() {\n    return (\n      <div key=\"container\">\n        <h1 className=\"display-4 my-3\">Questions</h1>\n        <Query query={QUESTIONS_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>loading...</h4>;\n            if (error) console.log(error);\n            return <QuizForm data={data} />\n          }}\n        </Query>\n      </div>\n    )\n  }\n}\n\nexport default CreateQuiz;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider }  from 'react-apollo';\nimport CreateQuiz from './components/Create_Quiz';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App container\">\n          <div className=\"row\">\n            <img src={logo}\n                 className=\"App-logo\"\n                 alt=\"CoHub logo\"\n                 style={{ display: 'block', margin: 'auto' }}\n            />\n          </div>\n          <div className=\"row\">\n            <h2 style={{ display: 'block', margin: 'auto' }}>Quiz</h2>\n          </div>\n          <CreateQuiz />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}